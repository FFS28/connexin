import Head from "next/head"
import React, { useState } from 'react';
import { useRouter } from 'next/router'
import { Button, Card, CardContent, Stack, TextField, Typography, Slide } from "@mui/material"
import MuiAlert, { AlertProps } from '@mui/material/Alert';
import { SlideProps } from '@mui/material/Slide'

import ImageMark from "../../src/components/elements/ImageMark"
import Snackbar from '@mui/material/Snackbar';
import { makeJSON, checkDataType } from '../../src/other/functions.globals';
import { saveUserPassData } from '../../src/other/apis.globals';

const Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(
    props,
    ref,
) {
    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

type TransitionProps = Omit<SlideProps, 'direction'>;

function TransitionDown(props: TransitionProps) {
  return <Slide {...props} direction="down" />;
}

function CustomAlert({state, type, message, change_state}: {state: boolean, type: "error" | "success", message: string, change_state: (param: boolean)=>void}) {

    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {
        if (reason === 'clickaway') {
            return;
        }
        change_state(false)
    };

    return (
        <>
            <Snackbar TransitionComponent={TransitionDown} open={state} ContentProps={{sx: {background: "transparent", color: "red", border: null, outline: null, boxShadow: null}}} anchorOrigin={{ vertical : 'top', horizontal : 'right' }} autoHideDuration={2000} onClose={handleClose} message={""} >
                <Alert onClose={handleClose} severity={type} sx={{ width: '100%' }}>
                    {message}
                </Alert>    
            </Snackbar>
        </>
    );
}

export default function ResetPassword({path}: {path: string}){
    
    const router = useRouter()
    const [m_state, setM_state] = useState(false)
    const [m_type, setM_type] = useState(true)
    const [m_message, setM_message] = useState("successful")

    const [password, setPassword] = useState("");
    const [repassword, setRepassword] = useState("");

    const change = (value: boolean) => {
        setM_state(value)
    }

    const saveUser = ()=>{
        
        if(password != repassword || password == "")
        {
            setM_message("Please check your password and re-password")
            setM_type(false)
            setM_state(true)
            return;
        }

        checkDataType(path).then((res: any) => {
            const data = makeJSON({
                ref : res.ref,  
                password: password
            })
            saveUserPassData(data).then(res=> {
                setM_message("Successful!")
                setM_type(false)
                setM_state(true)
                // router.push(process.env.DOMAIN + 'admins')
                router.push('http://preop.voittaa.co.uk:8011/admins');
            }).catch(rej => {
                setM_message("Please check your Url")
                setM_type(false)
                setM_state(true)    
            })          
        })  
    }

    return (
        <div style={{
            padding: "0px 0px",
            minHeight: "100vh",
            background: "linear-gradient(#1559da, #3073ea, #5092ff)",
            textAlign: "center",
            flex: 1,
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignContent: "center",
            paddingTop: "150px"
        }}>
            <Head>
                <title>Connexin - Health</title>
                <meta name={"description"} content={"Generated by create next app"} />
                <link rel={"icon"} href={"/favicon.ico"} />
            </Head>
            <CustomAlert change_state={change} state={m_state} type={m_type?"success":"error"} message={m_message} />
            <ImageMark type={"big"} />
            <Card sx={{minWidth: "300px", width: "500px", m: "auto", mt: 6, p: 4, pt: 4}}>
                <CardContent >
                    <Typography variant={"h4"} component={"h4"} sx={{mt: 1, mb: 1}}>Password Setting</Typography>
                    <Stack component={"form"} noValidate spacing={3} >                    
                        <TextField type={"password"} value={password} label={"Password"} variant={"standard"} onChange={ event => setPassword(event.target.value) } />
                        <TextField type={"password"} value={repassword} label={"Re-Password"} variant={"standard"} onChange={ event => setRepassword(event.target.value) } />
                        <Button variant={"outlined"} onClick={saveUser} >Set Password</Button>
                    </Stack>
                </CardContent>
            </Card>
        </div>
    )
}

export async function getStaticPaths() {
    return {
        paths: [],
        fallback: true
    }
}

export async function getStaticProps(context: any) {
    const params = context.params.args
    return {
        props: {path : params}
    }
}
  